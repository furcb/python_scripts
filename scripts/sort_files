#!/bin/env python

# FIXME: change output method and add a better error message

"""Sort Files

Sorts files in a directory by placing said files into data based (yyyymmdd) directories.
Additionally unique identifiers can be given and sort_files will search the file name for these
values and place them into separate directories named after this unique identifiers.

Usage:
    sort_files [options] <dir> [<uniques>...]

Arguments:
    <dir>           directory with unsorted files
    [<uniques>...]  list of unique words to filter out into unique directories, case-sensitive 

Options:
    -o, --output <dir>  custom output directory for sorted files [default: ./files]
    --no-symlink        disables uniques or multiple copies are created
    --copy-time         enables copying atime and mtime
"""

import os, sys
from docopt import docopt
from glob import glob
from datetime import datetime, date
from os import path as pt

LINK_PATH = "archive"

# Error message helper
def eprint(msg):
    print(msg, file=sys.stderr)

# Remove dir, dir must be empty
def remove_dir(path):
    try:
        os.rmdir(path)
    except OSError:
        print(f"Path contains files: {path}")
        exit(1)

# Create dir with 0o755, can be made to not exit on fail when necessary
def create_dir(path, exit_on_fail=True):
    try:
        os.makedirs(path, mode=0o755)
    except FileExistsError:
        if exit_on_fail:
            print(f"File still exists after removal: {path}")
            exit(1)

# Copy file mtime and atime to link file
def copy_time(from_path, to_path):
    try:
        from_mtime = os.stat(from_path).st_mtime
        from_atime = os.stat(from_path).st_atime

        os.utime(to_path, (from_atime, from_mtime), follow_symlinks=False)
    except Exception as e:
        print(f"Unable to update modification skipping update time step for {to_path}")
        eprint(f"Updating modification path for {to_path} returned\n{e}")
        

# Moves original file
def move_old(old_path, new_path):
    try:
        os.rename(old_path, new_path)
    except Exception as e:
        print(f"Failed to move {old_path} to {new_path}, skipping")
        print(str(e))

# Create a link file
def link_file(old_path, new_path):
    try:
        os.symlink(old_path, new_path)
    except Exception as e:
        print(f"Failed to create a link for {old_path} in {new_path}")
        print(str(e))

# Removes a link file
def link_remove(path):
    try:
        if os.path.islink(path):
            os.remove(path)
    except Exception as e:
        print(f"Failed to remove link: {path}")
        print(e)

# Undoes any organization and moves original files to base dir
def unsort(path):
    # move files and delete symlinks
    for p in glob(os.path.join(path, "**/*"), recursive=True):
        if os.path.islink(p):
            link_remove(p)
        else:
            move_old(p, os.path.join(path, os.path.basename(p)))
    for d in os.walk(path, topdown=False):
        if path != d[0]:
            remove_dir(d[0])

    # mv all files to base dir for linking
    new_dir = os.path.join(path, LINK_PATH)
    create_dir(new_dir)      # better alternative?
    for fpath in glob(os.path.join(path, "*")):
        move_old(fpath, os.path.join(new_dir, os.path.basename(fpath)))

# Sorts files by creating directories based on criteria specified
def sort(path, uniques, output_path, no_symlinks, copy_time):
    for fpath in glob(pt.join(path, LINK_PATH, "*")):
        new_dirs = []
        if len(uniques) > 0 and not no_symlinks:
            print("test")
            for unique in uniques:
                if unique in pt.basename(fpath):
                    new_dirs.append(unique)

        # always add file to a date dir
        date_created = os.stat(fpath).st_mtime
        date_created = date.fromtimestamp(date_created)
        new_dirs.append(date_created.strftime("%Y%m%d"))

        # create dir
        if output_path:
            create_dir(output_path, exit_on_fail=False)

        for dpath in new_dirs:
            create_dir(pt.join(output_path, dpath), exit_on_fail=False)
            old_path = pt.abspath(fpath)
            new_path = pt.join(pt.abspath(output_path), dpath, pt.basename(fpath))
            if no_symlinks:
                move_old(old_path, new_path)
            else:
                link_file(old_path, new_path)
            if copy_time:
                copy_time(old_path, new_path)

def main():
    args = docopt(__doc__)
    print(args)
    unsort(args["<dir>"])
    sort(args["<dir>"], \
            args["<uniques>"], \
            args["--output"], \
            args["--no-symlink"], \
            args["--copy-time"])

if __name__ == "__main__":
    main()
